/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package graph;

import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;

import static org.junit.jupiter.api.Assertions.*;

class AppTest {
    @Test void appHasAGreeting() {
        App classUnderTest = new App();
        assertNotNull(classUnderTest.getGreeting(), "app should have a greeting");
    }
    ///test add more than one node
    @Test void addNodeTest(){

        GraphAdjacencyList graphAdjacencyList=new GraphAdjacencyList();
         NodeGraph nodeGraph=new NodeGraph("5");
        NodeGraph nodeGraphTow=new NodeGraph("7");
        ArrayList arrayList=new ArrayList();
        HashMap hashMap=new HashMap();
        hashMap.put(nodeGraph,arrayList);
        hashMap.put(nodeGraphTow,arrayList);
      graphAdjacencyList.addNode("5");
        graphAdjacencyList.addNode("7");
        assertEquals(hashMap.toString(),graphAdjacencyList.adjListMap.toString());

    }
    //test get size
    @Test void sizeTest(){

        GraphAdjacencyList graphAdjacencyList=new GraphAdjacencyList();
        graphAdjacencyList.addNode("5");
        graphAdjacencyList.addNode("7");
        assertEquals(2,graphAdjacencyList.size());

    }
//test getNode
    @Test void getNodeTest(){

        GraphAdjacencyList graphAdjacencyList=new GraphAdjacencyList();
        graphAdjacencyList.addNode("5");
        graphAdjacencyList.addNode("7");
        assertEquals("[[NodeGraph{value=7}, NodeGraph{value=5}]]",graphAdjacencyList.getNode().toString());

    }
    //test getNeighbors
    @Test void getNeighborsTest(){
        GraphAdjacencyList graphAdjacencyList=new GraphAdjacencyList();
        NodeGraph nodeGraphF =new NodeGraph("4");

        ArrayList arrayListF=new ArrayList();
        arrayListF.add("2");
        arrayListF.add("4");
        arrayListF.add("6");

        graphAdjacencyList.adjListMap.put(nodeGraphF,arrayListF);


        assertEquals("[2, 4, 6]",graphAdjacencyList.getNeighbores(nodeGraphF).toString());

    }
//
@Test void addEdgesTest(){



    GraphAdjacencyList graphAdjacencyListTow=new GraphAdjacencyList();

    ArrayList <NodeGraph>arrayListFour=new ArrayList<>();
    ArrayList <NodeGraph>arrayListFive=new ArrayList<>();
    NodeGraph nodeGraphF =new NodeGraph("4");
    NodeGraph nodeGraphFi =new NodeGraph("5");

    graphAdjacencyListTow.adjListMap.put(nodeGraphF,arrayListFour);
    graphAdjacencyListTow.adjListMap.put(nodeGraphFi,arrayListFive);


    graphAdjacencyListTow.addEdge(nodeGraphF,nodeGraphFi);


    assertEquals("{NodeGraph{value=5}=[NodeGraph{value=4}], NodeGraph{value=4}=[NodeGraph{value=5}]}",graphAdjacencyListTow.adjListMap.toString());

}

/////////////////////// test code 36 && 38////////////////////////
@Test void code36(){

    GraphAdjacencyList graph=new GraphAdjacencyList();



    NodeGraph one = graph.addNode("one");
    NodeGraph tow =  graph.addNode("tow");
    NodeGraph three = graph.addNode("three");
    NodeGraph four = graph.addNode("four");



    graph.addEdge(one,tow);
    graph.addEdge(one,four);
    graph.addEdge(tow,three);
    graph.addEdge(tow,four);



    List<NodeGraph> result = new ArrayList<>();
    result.add(one);
    result.add(tow);
    result.add(three);
    result.add(four);



    assertEquals("[NodeGraph{value='one', weight=0}, NodeGraph{value='tow', weight=0}, NodeGraph{value='four', weight=0}, NodeGraph{value='three', weight=0}]",graph.breadthFirst(one).toString());

}
@Test void code37(){

    GraphAdjacencyList graph=new GraphAdjacencyList();



    NodeGraph one = graph.addNode("one");
    NodeGraph tow =  graph.addNode("tow");
    NodeGraph three = graph.addNode("three");
    NodeGraph four = graph.addNode("four");



    graph.addEdge(one,tow);
    graph.addEdge(one,four);
    graph.addEdge(tow,three);
    graph.addEdge(tow,four);



    List<NodeGraph> result = new ArrayList<>();
    result.add(one);
    result.add(tow);
    result.add(three);
    result.add(four);

    


    assertEquals("[NodeGraph{value='tow', weight=0}, NodeGraph{value='four', weight=0}, NodeGraph{value='one', weight=0}, NodeGraph{value='three', weight=0}]",graph.depthFirst(one).toString());

}


}
