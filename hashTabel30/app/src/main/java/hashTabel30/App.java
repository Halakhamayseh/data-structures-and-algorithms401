/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package hashTabel30;

public class App {
    public String getGreeting() {
        return "Hello World!";
    }

    public static void main(String[] args) {
//        System.out.println(new App().getGreeting());
//        HashTable<String>newHashTable=new HashTable<>(4);
//        newHashTable.add("a","firtAdd");
//        newHashTable.add("tow","towAdd");
//        System.out.println(newHashTable.get("a"));
//        System.out.println(newHashTable.get("tow"));
//       newHashTable.getHash("hala");
//        System.out.println(newHashTable.contain("a"));
//        System.out.println(newHashTable.contain("b"));
        ///////////////////////code31////////////////
//        HashmapRepeatedWord testRepeated=new HashmapRepeatedWord();
//        String test="It was a queer, sultry SUMMer , the summer they electrocuted the Rosenbergs, and I didnâ€™t know what I was doing in New York...";
//        System.out.println(testRepeated.findFirstRepeatedWord(test));
        //////////////////////code32///////////////////
        BinaryTree<Integer> secObj=new BinaryTree<>();
        secObj.root = new Node(150);
        secObj.root.left = new Node(100);
        secObj.root.right = new Node(250);
        secObj.root.left.left = new Node(75);
        secObj.root.left.right = new Node(160);
        secObj.root.left.right.left = new Node(125);
        secObj.root.left.right.right = new Node(175);
        secObj.root.right.left = new Node(200);
        secObj.root.right.right = new Node(350);
        secObj.root.right.right.left = new Node(300);
        secObj.root.right.right.right = new Node(500);
        /////
        BinaryTree<Integer> secObjTow=new BinaryTree<>();
        secObjTow.root = new Node(42);
        secObjTow.root.left = new Node(100);
        secObjTow.root.right = new Node(600);
        secObjTow.root.left.left = new Node(15);
        secObjTow.root.left.right = new Node(160);
        secObjTow.root.left.right.left = new Node(125);
        secObjTow.root.left.right.right = new Node(175);
        secObjTow.root.right.left = new Node(200);
        secObjTow.root.right.right = new Node(350);
        secObjTow.root.right.right.left = new Node(4);
        secObjTow.root.right.right.right = new Node(500);
        HashmapTreeIntersection<Integer>testTreeInsertion=new HashmapTreeIntersection<>();
        System.out.println(testTreeInsertion.hashmapTreeIntersectionFunction(secObj,secObjTow));

    }
}
