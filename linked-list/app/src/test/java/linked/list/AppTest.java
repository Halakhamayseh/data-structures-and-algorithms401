/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package linked.list;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

class AppTest {
    @Test void appHasAGreeting() {
        App classUnderTest = new App();
        assertNotNull(classUnderTest.getGreeting(), "app should have a greeting");
    }
        ///////////////////////test code 05/////////////////
        @Test void testCode05(){
        LinkedList funcTest = new LinkedList();
        funcTest.insert(3);
        assertEquals(3, funcTest.head.valueNode);
        assertTrue(funcTest.includes(3));
        }
    /////////////////////////test code 06 07 08 ///////////////
        @Test
                void appendtest() {
            LinkedList newtest=new LinkedList();
            newtest.append(4);
            Node newNode = newtest.head;
            String result = "";
            while (newNode != null) {
                result += "{" + newNode.valueNode + "}->";
                newNode = newNode.next;
            }
            result += "null";
            String ex = "{4}->null";
            assertEquals(ex, result);
            //assertEquals({2});
            //@Test void testbefore(){

            //}
        }
    @Test
    void insertAftertest() {
        LinkedList newtest=new LinkedList();
        newtest.append(4);
        newtest.append(5);
        newtest.append(7);
        newtest.insertAfter(5,2);
        newtest.toString();
        String res="{4}->{5}->{2}->{7}->null";
        assertEquals(res,newtest.toString());
    }
    @Test
    void linkedlistkthtest() {
        LinkedList newtest2=new LinkedList();
        newtest2.append(1);
        newtest2.append(0);
        newtest2.append(3);
        //newtest.toString();
        newtest2.linkedlistkth(2);
        String res="0";
        assertEquals(res,newtest2.linkedlistkth(2));
    }
    @Test
    void ziptest() {
        LinkedList list44 = new LinkedList();
        list44.append(1);
        list44.append(2);
        list44.append(3);
        LinkedList list55 = new LinkedList();
        list55.append(11);
        list55.append(22);
        list55.append(33);
        LinkedList listmerage = new LinkedList();
        String res="{1}->{11}->{2}->{22}->{3}->{33}->null";
        assertEquals(res,listmerage.zip(list44,list55).toString());
    }

}
